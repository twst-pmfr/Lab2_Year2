# Инструкция по сборке и запуску проекта Django "Персональный блог"

## Предварительные требования

Перед началом работы убедитесь, что у вас установлены:
- Python 3.8 или выше
- pip (менеджер пакетов Python)
- Git (для скачивания проекта)

---

## Шаг 1: Скачивание и подготовка проекта

### Вариант 1: Скачать архивом
1. Скачайте архив с проектом
2. Распакуйте архив в удобную директорию
3. Откройте терминал/командную строку и перейдите в папку проекта:

```bash
cd путь/к/папке/myblog
```

### Вариант 2: Клонировать через Git
```bash
git clone URL-репозитория
cd myblog
```

---

## Шаг 2: Создание виртуального окружения

### Для Windows:
```bash
# Создание виртуального окружения
python -m venv myblog_env

# Активация виртуального окружения
myblog_env\Scripts\activate
```

### Для Linux/MacOS:
```bash
# Создание виртуального окружения
python3 -m venv myblog_env

# Активация виртуального окружения
source myblog_env/bin/activate
```

**Результат:** В начале строки командной промпта должно появиться `(myblog_env)`

---

## Шаг 3: Установка зависимостей

Убедитесь, что виртуальное окружение активировано, и выполните:

```bash
pip install django pillow
```

**Проверка установки:**
```bash
pip list
```
Должны отобразиться пакеты: Django, Pillow и их зависимости.

---

## Шаг 4: Настройка базы данных

### Применение миграций:
```bash
python manage.py makemigrations
python manage.py migrate
```

**Результат:** Должны появиться сообщения о успешном применении миграций.

---

## Шаг 5: Создание суперпользователя

Для доступа к админ-панели создайте учетную запись администратора:

```bash
python manage.py createsuperuser
```

**Введите данные:**
- Username: `admin` (или ваш вариант)
- Email address: `admin@example.com` (можно пропустить)
- Password: `admin123` (или надежный пароль)
- Password (again): повторите пароль

---

## Шаг 6: Заполнение базы данных тестовыми данными

### Создайте папку для management-команд:
```bash
# Для Windows
mkdir blog\management
mkdir blog\management\commands

# Для Linux/MacOS
mkdir -p blog/management/commands
```

### Создайте файл fill_db.py в папке blog/management/commands/ и скопируйте туда код из части 7 лабораторной работы.

### Запустите заполнение базы данных:
```bash
python manage.py fill_db
```

**Результат:** Должны появиться сообщения о создании категорий и постов.

---

## Шаг 7: Запуск сервера разработки

```bash
python manage.py runserver
```

**Результат:** Должно появиться сообщение:
```
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.
```

---

## Шаг 8: Проверка работы приложения

### 8.1 Главная страница
Откройте браузер и перейдите по адресу:
```
http://127.0.0.1:8000/
```

**Что должно отобразиться:**
- Заголовок "Мой Персональный Блог"
- Список постов с заголовками, изображениями и кратким содержанием
- Навигационное меню

### 8.2 Админ-панель
Перейдите по адресу:
```
http://127.0.0.1:8000/admin/
```

**Войдите используя:**
- Логин: `admin` (или тот, который вы указали)
- Пароль: `admin123` (или ваш пароль)

**Что должно отобразиться:**
- Разделы "Categories" и "Posts"
- Возможность добавлять, редактировать и удалять записи

### 8.3 Детальная страница поста
На главной странице нажмите на заголовок любого поста - должна открыться страница с полным содержанием.

---

## Шаг 9: Тестирование функциональности

### Проверка 1: Добавление нового поста через админ-панель
1. Войдите в админ-панель
2. Нажмите "Posts" → "Add post"
3. Заполните поля:
   - Title: "Тестовый пост"
   - Content: "Это тестовый пост для проверки работы"
   - Author: выберите созданного пользователя
   - Category: выберите любую категорию
4. Нажмите "Save"
5. Вернитесь на главную страницу - новый пост должен отобразиться

### Проверка 2: Работа с категориями
1. В админ-панели перейдите в "Categories"
2. Добавьте новую категорию "Технологии"
3. Создайте пост в этой категории
4. Проверьте, что пост отображается с правильной категорией

---

## Шаг 10: Остановка сервера

Для остановки сервера вернитесь в терминал и нажмите:
```
Ctrl + C
```

---

## Возможные проблемы и решения

### Проблема 1: "python не распознается как команда"
**Решение:** Используйте `python3` вместо `python` на Linux/MacOS

### Проблема 2: Ошибки при миграциях
**Решение:** Выполните последовательно:
```bash
python manage.py makemigrations blog
python manage.py migrate
```

### Проблема 3: Ошибки с изображениями
**Решение:** Убедитесь, что установлен Pillow:
```bash
pip install pillow --force-reinstall
```

### Проблема 4: "ModuleNotFoundError: No module named 'blog'"
**Решение:** Убедитесь, что вы находитесь в правильной директории (где лежит manage.py)

### Проблема 5: Порт 8000 занят
**Решение:** Запустите сервер на другом порту:
```bash
python manage.py runserver 8080
```

---

## Структура проекта после настройки

```
myblog/
├── myblog/              # Настройки проекта
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── blog/                # Приложение блога
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   ├── views.py
│   ├── urls.py
│   ├── management/
│   │   └── commands/
│   │       └── fill_db.py
│   └── templates/
│       └── blog/
│           ├── base.html
│           ├── post_list.html
│           └── post_detail.html
├── db.sqlite3           # База данных
├── manage.py            # Управляющий скрипт
└── media/               # Медиафайлы (создастся автоматически)
    └── post_images/
```

---

## Дополнительные команды для разработки

### Просмотр всех URL-адресов:
```bash
python manage.py show_urls
```

### Создание дампа базы данных:
```bash
python manage.py dumpdata blog --indent 2 > blog_data.json
```

### Загрузка данных из дампа:
```bash
python manage.py loaddata blog_data.json
```

---

## Важные замечания

1. **Не коммитьте db.sqlite3** в Git - это ваша локальная база данных
2. **Для продакшена** используйте PostgreSQL или MySQL вместо SQLite
3. **В виртуальном окружении** устанавливайте все зависимости через pip
4. **При проблемах** всегда проверяйте, что виртуальное окружение активировано
